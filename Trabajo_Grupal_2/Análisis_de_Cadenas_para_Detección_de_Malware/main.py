# Importing necessary modules
import os  # Module for operating system functionalities
import time  # Module for time-related functions
import pyfiglet  # Module for creating ASCII art from text
import psutil  # Module to obtain system information
from simple_term_menu import TerminalMenu  # Module for creating terminal menus

# Function to obtain the list of malicious processes from a file
def get_lista_propia():
    ''' 
    Reads the file "Malicious_processes.txt" and returns a list of malicious processes if it exists.
    If the file is not found, it displays the directory contents and asks for providing "Malicious_processes.txt".
    '''
    nombre_lista = input("Ingresa el nombre del archivo de la que contiene la base de datos de malwares: ")
    try:
        with open(nombre_lista, "r") as file:
            maliciosos = [line.strip() for line in file]
    except FileNotFoundError:
        directory_contents = os.listdir()
        print("No se encontró la base de datos de malwares. Solo se encontraron los siguientes contenidos:", directory_contents)
        print("Se usará una lista predeterminada")
        maliciosos = [
        "Trojan.exe",
        "Ransomware.exe",
        "Spyware.exe",
        "Keylogger.exe",
        "BotnetClient.exe",
        "Adware.exe",
        "Rootkit.exe"
        ]
    return maliciosos
    
# Function to obtain manually entered processes
def get_procesos_manuales():
    '''
    Asks the user to manually enter processes and returns a list of those processes.
    The user can enter processes one by one, pressing Enter to continue and Enter twice to finish.
    '''
    posibles = []
    print("Escribe los procesos (Enter para continuar, Enter dos veces para finalizar la lista):")
    while True:
        posible = input("Siguiente Proceso: ")
        if posible == "":
            break
        posibles.append(posible)
    return posibles

# Function to obtain processes from a file
def get_procesos_archivo(camino):
    '''
    Reads a file specified by the user and returns a list of processes found in the file.
    '''
    try:
        with open(camino, 'r') as file:
            posibles = [line.strip() for line in file]
        return posibles
    except FileNotFoundError:
        print("Archivo no encontrado. Por favor, proporciona una ruta de archivo válida.")
        return False

# Function to automatically obtain processes from the system
def procesos_automaticos():
    '''
    Automatically retrieves a list of running processes on the system and returns it.
    '''
    posibles = []
    try:
        for procesos in psutil.process_iter(['name']):
            current = procesos.info['name']
            posibles.append(current)
    except psutil.Error as e:
        print(f"Ocurrió un error: {e}")
    
    return posibles

# Function to compare processes and display matches with malicious processes
def match_and_print(sospechosos, maliciosos):
    '''
    Compares the list of suspect processes with the list of malicious processes and displays any matches found.
    '''
    coincidencias = []
    for current in sospechosos:
        if current not in coincidencias and current in maliciosos:
            coincidencias.append(current)
    if coincidencias:
        print("Los siguientes procesos pueden ser maliciosos:")
        for coincidente in coincidencias:
            print(coincidente)
        time.sleep(2)
    else:
        print("No se encontraron elementos maliciosos.")
        time.sleep(2)

# Main menu function
def main_menu():
    '''
    Function that displays the main menu of the program.
    '''
    while True:
        os.system("clear")
        print(pyfiglet.figlet_format("Menú", font="big", justify="center"))
        options = ["[1] Entrada Manual", "[2] Ruta de Archivo", "[3] Automático desde el ordenador", "[4] Salir"]
        main_menu = TerminalMenu(options)
        main_menu_entry_index = main_menu.show()
        maliciosos = get_lista_propia()
        #Option 1, writen in terminal
        if main_menu_entry_index == 0:
            sospechosos = get_procesos_manuales()
            match_and_print(sospechosos, maliciosos)
            break
        #Option 2, providing a file
        elif main_menu_entry_index == 1:
            file_path = input("Ingresa el nombre del archivo que contiene los procesos a analizar: ")
            sospechosos = get_procesos_archivo(file_path)
            if sospechosos == False:
                break
            match_and_print(sospechosos, maliciosos)
            break
        #Option 3, automatic search
        elif main_menu_entry_index == 2:
            sospechosos = procesos_automaticos()
            match_and_print(sospechosos, maliciosos)
            break
        #option 4, exit program
        elif main_menu_entry_index == 3:
            exit()

# Main function of the program
def main():
    '''
    Main function of the program.
    '''
    os.system("clear")
    print(pyfiglet.figlet_format("Euneiz", font="big", justify="center"))
    time.sleep(1.5)
    os.system("clear")
    print(pyfiglet.figlet_format("Proyecto:\nAnálisis de Cadenas de Detección de Malware", font="big", justify="center", width=100))
    time.sleep(1.5)
    main_menu()

# Program execution
if __name__ == "__main__":
    main()
