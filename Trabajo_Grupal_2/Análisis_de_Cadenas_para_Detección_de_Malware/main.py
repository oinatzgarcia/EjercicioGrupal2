# Importación de módulos necesarios
import os  # Módulo para funcionalidades del sistema operativo
import time  # Módulo para funciones relacionadas con el tiempo
import pyfiglet  # Módulo para crear arte ASCII a partir de texto
import psutil  # Módulo para obtener información del sistema
from simple_term_menu import TerminalMenu  # Módulo para crear menús en la terminal

# Función para obtener la lista de procesos maliciosos desde un archivo
def get_lista_propia():
    ''' 
    Lee el archivo "Malicious_processes.txt" y devuelve una lista de procesos maliciosos si existe.
    Si no se encuentra el archivo, muestra los contenidos del directorio y pide proporcionar "Malicious_processes.txt".
    '''
    try:
        with open("Malicious_processes.txt", "r") as file:
            maliciosos = [line.strip() for line in file]
    except FileNotFoundError:
        directory_contents = os.listdir()
        print("No se encontró la base de datos de malware. Solo se encontraron los siguientes contenidos:", directory_contents)
        print("Se usará una lista predeterminada")
        maliciosos = [
        "Trojan.exe",
        "Ransomware.exe",
        "Spyware.exe",
        "Keylogger.exe",
        "BotnetClient.exe",
        "Adware.exe",
        "Rootkit.exe"
        ]
    return maliciosos
    
# Función para obtener procesos ingresados manualmente
def get_procesos_manuales():
    '''
    Solicita al usuario que ingrese los procesos manualmente y devuelve una lista de esos procesos.
    El usuario puede ingresar procesos uno por uno, presionando Enter para continuar y Enter dos veces para finalizar.
    '''
    posibles = []
    print("Escribe los procesos (Enter para continuar, Enter dos veces para finalizar la lista):")
    while True:
        posible = input("Siguiente Proceso: ")
        if posible == "":
            break
        posibles.append(posible)
    return posibles

# Función para obtener procesos desde un archivo
def get_procesos_archivo(camino):
    '''
    Lee un archivo especificado por el usuario y devuelve una lista de procesos encontrados en el archivo.
    '''
    try:
        with open(camino, 'r') as file:
            posibles = [line.strip() for line in file]
        return posibles
    except FileNotFoundError:
        print("Archivo no encontrado. Por favor, proporciona una ruta de archivo válida.")
        return False

# Función para obtener procesos automáticamente del sistema
def procesos_automaticos():
    '''
    Obtiene automáticamente una lista de procesos en ejecución en el sistema y la devuelve.
    '''
    posibles = []
    try:
        for procesos in psutil.process_iter(['name']):
            current = procesos.info['name']
            posibles.append(current)
    except psutil.Error as e:
        print(f"Ocurrió un error: {e}")
    
    return posibles

# Función para comparar procesos y mostrar coincidencias con procesos maliciosos
def match_and_print(sospechosos, maliciosos):
    '''
    Compara la lista de procesos sospechosos con la lista de procesos maliciosos y muestra las coincidencias si las hay.
    '''
    coincidencias = []
    for current in sospechosos:
        if current not in coincidencias and current in maliciosos:
            coincidencias.append(current)
    if coincidencias:
        print("Los siguientes procesos pueden ser maliciosos:")
        for coincidente in coincidencias:
            print(coincidente)
        time.sleep(2)
    else:
        print("No se encontraron elementos maliciosos.")
        time.sleep(2)

# Función del menú principal
def main_menu():
    '''
    Función que muestra el menú principal del programa.
    '''
    while True:
        os.system("clear")
        print(pyfiglet.figlet_format("Menú", font="big", justify="center"))
        options = ["[1] Entrada Manual", "[2] Ruta de Archivo", "[3] Automático desde el ordenador", "[4] Salir"]
        main_menu = TerminalMenu(options)
        main_menu_entry_index = main_menu.show()
        maliciosos = get_lista_propia()
        if main_menu_entry_index == 0:
            sospechosos = get_procesos_manuales()
            match_and_print(sospechosos, maliciosos)
            break
        elif main_menu_entry_index == 1:
            file_path = input("Ingresa la ruta al archivo que contiene los procesos: ")
            sospechosos = get_procesos_archivo(file_path)
            if sospechosos == False:
                break
            match_and_print(sospechosos, maliciosos)
            break
        elif main_menu_entry_index == 2:
            sospechosos = procesos_automaticos()
            match_and_print(sospechosos, maliciosos)
            break
        elif main_menu_entry_index == 3:
            exit()

# Función principal del programa
def main():
    '''
    Función principal del programa.
    '''
    os.system("clear")
    print(pyfiglet.figlet_format("Euneiz", font="big", justify="center"))
    time.sleep(1.5)
    os.system("clear")
    print(pyfiglet.figlet_format("Proyecto:\nAnálisis de Cadenas de Detección de Malware", font="big", justify="center", width=100))
    time.sleep(1.5)
    main_menu()

# Ejecución del programa
if __name__ == "__main__":
    main()
