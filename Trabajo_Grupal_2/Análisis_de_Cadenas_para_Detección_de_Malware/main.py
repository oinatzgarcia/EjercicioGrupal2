import os
import time
import pyfiglet
import psutil
from simple_term_menu import TerminalMenu

    #Diccionario de procesos maliciosos
def get_lista_propia ():
    try:
        with open ("Malicious_processes.txt", "r") as file:
         maliciosos = [line.strip() for line in file]
        return maliciosos
    except FileNotFoundError:
        directory_contents = os.listdir()
        print("Malware database could not be found. Only the following contents were found: ", directory_contents)
        print("Please provide with 'Malicious_processes.txt'")
        return False

def get_procesos_manuales ():
    posibles = []            
    print("Write the processes (Enter for next, Enter twice to end listing):")
    while True:
        posible = input("Next Process: ")   
    # Romper loop con Enter
        if posible == "":
            break
    # AÃ±adir el posible a la lista de posibles
        posibles.append(posible)
    return posibles

def get_procesos_archivo (camino):
    try:
        with open(camino, 'r') as file:
            posibles = [line.strip() for line in file]
        return posibles
    except FileNotFoundError:
        print("File not found. Please provide a valid file path.")
        return False

def procesos_automaticos():
    posibles = []
    try:
        for procesos in psutil.process_iter(['name']):
            current = procesos.info['name']
            posibles.append(current)
    except psutil.Error as e:
        print("An error occurred: {e}")
    
    return posibles

def match_and_print (sospechosos, maliciosos):
    coincidencias= []
    for current in sospechosos:
         if current not in coincidencias and current in maliciosos:
             coincidencias.append(current)
    if coincidencias:
        print("The following processes are potentially malicious:")
        for coincidentes in coincidencias:
            print(coincidentes)
        time.sleep(2)
    else:
        print("No malicious elements were found.")
        time.sleep(2)



def main_menu():
    """
    Function that displays the program's main menu.
    Args:
    None
    Returns:
    None
    """
    while True:
        os.system("clear")
        print(pyfiglet.figlet_format("Menu", font="big", justify="center"))
        options = ["[1] Manual input ", "[2] File Path", "[3] Automatic from computer", "[4] Exit"]
        main_menu = TerminalMenu(options)
        main_menu_entry_index = main_menu.show()
        maliciosos = get_lista_propia() 
        if not maliciosos:
            exit()
        if main_menu_entry_index == 0:
            sospechosos = get_procesos_manuales()
            match_and_print(sospechosos, maliciosos)
            break
        elif main_menu_entry_index == 1:
            file_path = input("Enter the path to the file containing processes: ")
            sospechosos = get_procesos_archivo(file_path)
            if sospechosos == False:
                break     
            match_and_print(sospechosos, maliciosos)
            break
        elif main_menu_entry_index == 2:
            sospechosos = procesos_automaticos()
            match_and_print(sospechosos,maliciosos)
            break
        elif main_menu_entry_index == 3:
            exit()

        

def main():
    """
    Main function of the program.
    Args:
    None
    Returns:
    None
    """
    os.system("clear")
    print(pyfiglet.figlet_format("Euneiz", font="big", justify="center"))
    time.sleep(1.5)
    os.system("clear")
    print(pyfiglet.figlet_format("Project:\nMalware Detection String Analysis", font="big", justify="center", width=100))
    time.sleep(1.5)
    main_menu()

if __name__ == "__main__":
    main()
